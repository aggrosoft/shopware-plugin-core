const l=`{% block aggro_entity_detail %} <sw-page class="aggro-entity-detail"> {% block aggro_entity_detail_header %} <template #smart-bar-header> <h2>{{ placeholder(editEntity, 'name', $tc('aggro.entity-detail.textHeadline')) }}</h2> </template> {% endblock %} {% block aggro_entity_detail_actions %} <template #smart-bar-actions> {% block aggro_entity_detail_actions_abort %} <sw-button v-tooltip.bottom="tooltipCancel" :disabled="entityIsLoading || undefined" @click="onCancel" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block aggro_entity_detail_actions_save %} <sw-button-process v-model:process-success="isSaveSuccessful" v-tooltip.bottom="tooltipSave" class="aggro-entity-detail__save-action" :is-loading="isLoading" :disabled="isLoading || !acl.can(entity+'.editor') || undefined" variant="primary" @click.prevent="onSave" > {{ $tc('aggro.entity-detail.buttonSave') }} </sw-button-process> {% endblock %} </template> {% endblock %} {% block aggro_entity_detail_language_switch %} <template #language-switch> <sw-language-switch :disabled="entityId == null || undefined" :save-changes-function="saveOnLanguageChange" :abort-change-function="abortOnLanguageChange" @on-change="onChangeLanguage" /> </template> {% endblock %} {% block aggro_entity_detail_content %} <template #content> <sw-card-view> <template v-if="entityIsLoading"> <sw-skeleton variant="detail-bold" /> <sw-skeleton /> </template> <template v-else> {% block aggro_entity_detail_content_language_info %} <sw-language-info :entity-description="placeholder(entity, 'name', $tc('aggro.entity-detail.textHeadline'))" /> {% endblock %} {% block aggro_entity_detail_content_tabs %} <sw-tabs v-if="!isCreateMode" class="aggro-entity-detail__tabs" position-identifier="aggro-entity-detail-tabs" :default-item="forms[0].ident" > <template #default="{ active }"> <sw-tabs-item v-for="form in forms" :key="\`tab-item-\${form.ident}\`" class="aggro-entity-detail__tab-item" :name="form.ident" :active-tab="active" > {{ $tc(form.title) }} </sw-tabs-item> </template> <template #content="{ active }"> <template v-for="form in forms" :key="\`tab-\${form.ident}\`" > <div v-if="active === form.ident" class="aggro-entity-detail__tab" > <sw-card v-for="card in form.cards" :key="\`card-\${card.ident}\`" class="aggro-entity-detail__card" :class="card.grid ? '--has-grid' : ''" position-identifier="\`aggro-entity-detail-tab-\${card.ident}\`" :title="$tc(card.title)" > <template v-if="!isLoading"> <div class="aggro-entity-detail__grid-toolbar" v-if="!editEntity.isNew() && card.grid"> <sw-container columns="1fr 32px minmax(100px, 200px)" gap="0 10px" > <sw-simple-search-field v-model:value="gridSearchTerm[card.grid.ref]" size="small" variant="form" @search-term-change="onGridSearch(card.grid)" /> <sw-button square size="small" :disabled="!gridSelection[card.grid.ref] || gridSelection[card.grid.ref].length === 0" class="aggro-entity-detail__grid-delete-button" @click="onDeleteGridEntity(card.grid)" > <sw-icon name="regular-trash" small /> </sw-button> <sw-container> <sw-button size="small" class="aggro-entity-detail__grid-add-button" @click="onAddGridEntity(card.grid)" > {{ $tc('aggro.entity-detail.addOption') }} </sw-button> </sw-container> </sw-container> </div> <sw-container :columns="card.columns || '1fr'" gap="0px 30px" v-if="card.fields"> <template v-for="field in card.fields" :key="field.ref"> <sw-form-field-renderer :type="field.type" :config="translatedConfig(field.config)" v-if="field.condition ? field.condition(editEntity) : true" v-model:value="editEntity[field.ref]" v-model:entity-collection="editEntity[field.ref]" class="aggro-entity-detail__field" /> </template> </sw-container> </template> <template #grid v-if="card.grid"> <sw-empty-state v-if="editEntity.isNew()" title="" :subline="$tc('aggro.entity-detail.optionEmptyStateSubline')" :absolute="false" > <template #icon> <img :src="assetFilter('/administration/static/img/empty-states/products-empty-state.svg')" alt="" > </template> </sw-empty-state> <sw-one-to-many-grid v-else :ref="(el) => gridRefs[card.grid.ref] = el" :is-loading="gridLoading[card.grid.ref]" :collection="editEntity[card.grid.ref]" :data-source="editEntity[card.grid.ref]" :columns="card.grid.columns" :full-page="false" :local-mode="editEntity.isNew()" :allow-inline-edit="acl.can(gridEntity(card.grid)+'.editor')" :sort-by="getGridSortBy(card.grid)" :sort-direction="getGridSortDirection(card.grid)" @selection-change="onGridSelectionChanged(card.grid, $event)" > <template #column-name="{ item, isInlineEdit }"> <template v-if="isInlineEdit"> <sw-text-field v-model:value="item.name" size="small" /> </template> <a v-else class="aggro-entity-detail__grid-detail-link" role="button" tabindex="0" @click="onEditGridEntity(card.grid,item)" @keydown.enter="onEditGridEntity(card.grid,item)" > {{ item.translated.name }} </a> </template> <template #more-actions="{ item }"> <sw-context-menu-item class="aggro-entity-detail__grid-edit-action" :disabled="!acl.can(gridEntity(card.grid)+'.editor')" @click="onEditGridEntity(card.grid,item)" > {{ $tc('aggro.entity-detail.contextMenuView') }} </sw-context-menu-item> </template> <template #delete-action="{ item }"> <sw-context-menu-item variant="danger" :disabled="!acl.can(gridEntity(card.grid)+'.editor')" @click="onDeleteSingleGridEntity(card.grid,item.id)" > {{ $tc('aggro.entity-detail.contextMenuDelete') }} </sw-context-menu-item> </template> </sw-one-to-many-grid> <sw-modal :title="gridEditEntity?.name ? gridEditEntity.name : $tc('aggro.entity-detail.editGridHeadline')" @modal-close="onCancelEditGridEntity" v-if="editedGrid?.ref === card.grid.ref && gridEditEntity" > <sw-container columns="1fr" gap="0px 30px"> <template v-for="gridField in card.grid.fields" :key="gridField.ref"> <sw-form-field-renderer :type="gridField.type" :config="translatedConfig(gridField.config)" v-if="gridField.condition ? gridField.condition(editEntity, gridEditEntity) : true" v-model:value="gridEditEntity[gridField.ref]" v-model:entity-collection="gridEditEntity[gridField.ref]" class="aggro-entity-detail__field" /> </template> </sw-container> <template #modal-footer> <sw-button size="small" @click="onCancelEditGridEntity" > {{ $tc('global.default.cancel') }} </sw-button> <sw-button variant="primary" size="small" @click="onSaveGridEntity" > {{ $tc('global.default.apply') }} </sw-button> </template> </sw-modal> </template> </sw-card> </div> </template> </template> </sw-tabs> {% endblock %} {% block aggro_entity_detail_custom_field_sets %} <sw-card v-if="customFieldSets.length > 0" position-identifier="aggro-entity-detail-custom-field-sets" :title="$tc('sw-settings-custom-field.general.mainMenuItemGeneral')" :is-loading="entityIsLoading" > <sw-custom-field-set-renderer v-if="editEntity" :entity="editEntity" :sets="customFieldSets" :disabled="!acl.can(entity+'.editor') || undefined" /> </sw-card> {% endblock %} </template> </sw-card-view> </template> {% endblock %} {% block aggro_entity_detail_sidebar %} <template #sidebar> <sw-sidebar :propagate-width="true"> <sw-sidebar-media-item ref="mediaSidebarItem" :disabled="!acl.can(entity+'.editor') || undefined" > <template #context-menu-items="media" > <sw-context-menu-item @click="setMediaFromSidebar(media.mediaItem)"> {{ $tc('aggro.entity-detail.labelUseAsLogo') }} </sw-context-menu-item> </template> </sw-sidebar-media-item> </sw-sidebar> </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:d,State:o,Data:{Criteria:n}}=Shopware,{mapPropertyErrors:c}=Shopware.Component.getComponentHelper(),g={template:l,inject:["repositoryFactory","acl"],mixins:[d.getByName("placeholder"),d.getByName("notification"),d.getByName("discard-detail-page-changes")("entity")],shortcuts:{"SYSTEMKEY+S":"onSave",ESCAPE:"onCancel"},props:{entityId:{type:String,required:!1,default:null},entity:String,labels:Object,links:Object,forms:Object},data(){return{editEntity:null,customFieldSets:[],isLoading:!1,isSaveSuccessful:!1,gridSelection:{},gridSortDirection:{},gridSortBy:{},gridSearchTerm:{},gridLoading:{},gridEditEntity:null,editedGrid:null,gridRefs:{}}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{isSystemLanguage(){return o.get("context").api.systemLanguageId===this.currentLanguage},currentLanguage(){return o.get("context").api.languageId},identifier(){return this.placeholder(this.editEntity,"name")},entityIsLoading(){return this.isLoading||this.editEntity==null},entityRepository(){return this.repositoryFactory.create(this.entity)},entityCriteria(){const t=new n;t.addFilter(n.equals("id",this.entityId));for(const e of this.associationFormFields)t.addAssociation(e);return t},associationFormFields(){const t=Shopware.EntityDefinition.get(this.entity),e=[];for(const a of this.forms)for(const i of a.cards)if(i.grid)e.push(i.grid.ref);else for(const s of i.fields){const r=t.properties[s.ref];r&&r.type==="association"&&r.relation==="many_to_many"&&e.push(s.ref)}return e},mediaRepository(){return this.repositoryFactory.create("media")},customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},customFieldSetCriteria(){const t=new n(1,null);return t.addFilter(n.equals("relations.entityName",this.entity)),t},mediaUploadTag(){return`aggro-entity-detail--${this.editEntity.id}`},tooltipSave(){return this.acl.can(this.entity+".editor")?{message:`${this.$device.getSystemKey()} + S`,appearance:"light"}:{showDelay:300,message:this.$tc("sw-privileges.tooltip.warning"),disabled:this.acl.can(this.entity+".editor"),showOnDisabledElements:!0}},tooltipCancel(){return{message:"ESC",appearance:"light"}},assetFilter(){return Shopware.Filter.getByName("asset")}},watch:{entityId(){this.createdComponent()}},created(){this.createdComponent()},methods:{createdComponent(){if(this.entityId){this.loadEntityData();return}Shopware.State.commit("context/resetLanguageToDefault"),this.editEntity=this.entityRepository.create()},async loadEntityData(){this.isLoading=!0;const[t,e]=await Promise.allSettled([this.entityRepository.search(this.entityCriteria),this.customFieldSetRepository.search(this.customFieldSetCriteria)]);t.status==="fulfilled"&&(this.editEntity=t.value.first()),e.status==="fulfilled"&&(this.customFieldSets=e.value),(t.status==="rejected"||e.status==="rejected")&&this.createNotificationError({message:this.$tc("global.notification.notificationLoadingDataErrorMessage")}),this.isLoading=!1},abortOnLanguageChange(){return this.entityRepository.hasChanges(this.editEntity)},saveOnLanguageChange(){return this.onSave()},onChangeLanguage(){this.loadEntityData()},setMediaItem({targetId:t}){this.editEntity.mediaId=t},setMediaFromSidebar(t){this.editEntity.mediaId=t.id},onUnlinkLogo(){this.editEntity.mediaId=null},openMediaSidebar(){this.$refs.mediaSidebarItem.openContent()},onDropMedia(t){this.setMediaItem({targetId:t.id})},onSave(){this.acl.can(this.entity+".editor")&&(this.isLoading=!0,this.entityRepository.save(this.editEntity).then(()=>{if(this.isLoading=!1,this.isSaveSuccessful=!0,this.entityId===null){this.$router.push({name:this.links.detail,params:{id:this.editEntity.id}});return}this.loadEntityData()}).catch(t=>{throw this.isLoading=!1,this.createNotificationError({message:this.$tc("global.notification.notificationSaveErrorMessageRequiredFieldsInvalid")}),t}))},onCancel(){this.$router.push({name:this.links.list})},translatedConfig(t){return t?Object.assign({},t,{label:t.label?this.$tc(t.label):null,placeholder:t.placeholder?this.$tc(t.placeholder):null,helpText:t.helpText?this.$tc(t.helpText):null,options:t.options?t.options.map(e=>({...e,label:this.$tc(e.label)})):null}):null},gridPropertyDefinition(t){return Shopware.EntityDefinition.get(this.entity).properties[t.ref]},gridEntity(t){const e=this.gridPropertyDefinition(t);return e==null?void 0:e.entity},gridRepository(t){return this.repositoryFactory.create(this.gridEntity(t))},getGridSortBy(t){return this.gridSortBy[t.ref]||"name"},getGridSortDirection(t){return this.gridSortDirection[t.ref]||"ASC"},onGridSearch(t){this.editEntity[t.ref].criteria.setTerm(this.gridSearchTerm[t.ref]),this.refreshGrid(t)},onGridSelectionChanged(t,e){this.gridSelection[t.ref]=e&&Object.values(e).length?e:null},onAddGridEntity(t){if(!this.isSystemLanguage)return!1;this.gridEditEntity=this.gridRepository(t).create();const e=this.gridPropertyDefinition(t);return this.gridEditEntity[e.referenceField]=this.editEntity.id,this.editedGrid=t,!0},async onDeleteGridEntity(t){const e=this.gridSelection[t.ref],a=Object.values(e);if(this.editEntity.isNew())for(const i of a)this.editEntity[t.ref].remove(i.id);else for(const i of a)await this.gridRepository(t).delete(i.id);this.refreshGrid(t)},async onDeleteSingleGridEntity(t,e){await this.gridRepository(t).delete(e),this.refreshGrid(t)},onEditGridEntity(t,e){this.gridEditEntity=e,this.editedGrid=t},onCancelEditGridEntity(){this.gridEditEntity=this.editedGrid=null},onSaveGridEntity(){const t=this.editedGrid.ref;this.editEntity.isNew()?(console.log("local new",this.gridEditEntity),this.editEntity[t].has(this.gridEditEntity.id)||this.editEntity[t].add(this.gridEditEntity),this.gridEditEntity=this.editedGrid=null):this.gridRepository(this.editedGrid).save(this.gridEditEntity).then(()=>{this.refreshGrid(this.editedGrid),this.gridEditEntity=this.editedGrid=null})},refreshGrid(t){this.gridLoading[t.ref]=!0,this.gridRefs[t.ref].resetSelection(),this.gridRefs[t.ref].load().then(()=>{this.gridLoading[t.ref]=!1})}}};export{g as default};
