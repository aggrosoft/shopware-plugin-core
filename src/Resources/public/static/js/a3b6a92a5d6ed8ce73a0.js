(window["webpackJsonpPluginaggro-plugin-core-plugin"]=window["webpackJsonpPluginaggro-plugin-core-plugin"]||[]).push([[880],{934:function(){},880:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return s}}),n(729);let{Mixin:i,State:a,Data:{Criteria:r}}=Shopware,{mapPropertyErrors:o}=Shopware.Component.getComponentHelper();var s={template:'{% block aggro_entity_detail %}\n    <sw-page class="aggro-entity-detail">\n\n        {% block aggro_entity_detail_header %}\n            <template #smart-bar-header>\n                <h2>{{ placeholder(editEntity, \'name\', $tc(\'aggro.entity-detail.textHeadline\')) }}</h2>\n            </template>\n\n        {% endblock %}\n\n        {% block aggro_entity_detail_actions %}\n            <template #smart-bar-actions>\n\n                {% block aggro_entity_detail_actions_abort %}\n                    <sw-button\n                            v-tooltip.bottom="tooltipCancel"\n                            :disabled="entityIsLoading || undefined"\n                            @click="onCancel"\n                    >\n                        {{ $tc(\'global.default.cancel\') }}\n                    </sw-button>\n                {% endblock %}\n\n                {% block aggro_entity_detail_actions_save %}\n                    <sw-button-process\n                            v-if="!actions || !actions.length"\n                            v-model:process-success="isSaveSuccessful"\n                            v-tooltip.bottom="tooltipSave"\n                            class="aggro-entity-detail__save-action"\n                            :is-loading="isLoading"\n                            :disabled="isLoading || !acl.can(entity+\'.editor\') || undefined"\n                            variant="primary"\n                            @click.prevent="onSave"\n                    >\n                        {{ $tc(\'aggro.entity-detail.buttonSave\') }}\n                    </sw-button-process>\n                {% endblock %}\n\n                {% block aggro_entity_detail_custom_actions %}\n                <sw-button-group v-else class="aggro-entity-detail__custom-actions" :split-button="true">\n                    <sw-button-process\n                            v-model:process-success="isSaveSuccessful"\n                            v-tooltip.bottom="tooltipSave"\n                            class="aggro-entity-detail__save-action"\n                            :is-loading="isLoading"\n                            :disabled="isLoading || !acl.can(entity+\'.editor\') || undefined"\n                            variant="primary"\n                            @click.prevent="onSave"\n                    >\n                        {{ $tc(\'aggro.entity-detail.buttonSave\') }}\n                    </sw-button-process>\n                    <sw-context-button>\n                        <template #button>\n                            <sw-button\n                                    class="aggro-entity-detail__button-context-menu"\n                                    square\n                                    variant="primary"\n                            >\n                                <sw-icon\n                                        name="regular-chevron-down-xs"\n                                        size="16"\n                                />\n                            </sw-button>\n                        </template>\n\n                        {% block sw_product_detail_actions_save_context_menu_actions %}\n                            {% block sw_product_detail_actions_duplicate %}\n                                <sw-context-menu-item\n                                        v-for="action in actions"\n                                        v-bind="action.props"\n                                        @click="action.onClick(editEntity, this)"\n                                >\n                                    {{ $tc(action.label) }}\n                                </sw-context-menu-item>\n                            {% endblock %}\n                        {% endblock %}\n                    </sw-context-button>\n                </sw-button-group>\n                {% endblock %}\n\n            </template>\n        {% endblock %}\n\n        {% block aggro_entity_detail_language_switch %}\n            <template #language-switch>\n                <sw-language-switch\n                        :disabled="entityId == null || undefined"\n                        :save-changes-function="saveOnLanguageChange"\n                        :abort-change-function="abortOnLanguageChange"\n                        @on-change="onChangeLanguage"\n                />\n            </template>\n        {% endblock %}\n\n        {% block aggro_entity_detail_content %}\n            <template #content>\n                <sw-card-view>\n                    <template v-if="entityIsLoading">\n                        <sw-skeleton variant="detail-bold" />\n                        <sw-skeleton />\n                    </template>\n\n                    <template v-else>\n\n                        {% block aggro_entity_detail_content_language_info %}\n                            <sw-language-info\n                                    :entity-description="placeholder(entity, \'name\', $tc(\'aggro.entity-detail.textHeadline\'))"\n                            />\n                        {% endblock %}\n\n                        {% block aggro_entity_detail_content_tabs %}\n                            <sw-tabs\n                                    v-if="!isCreateMode"\n                                    class="aggro-entity-detail__tabs"\n                                    position-identifier="aggro-entity-detail-tabs"\n                                    :default-item="forms[0].ident"\n                            >\n\n                                <template #default="{ active }">\n                                    <sw-tabs-item\n                                            v-for="form in forms"\n                                            :key="`tab-item-${form.ident}`"\n                                            class="aggro-entity-detail__tab-item"\n                                            :name="form.ident"\n                                            :active-tab="active"\n                                    >\n                                        {{ $tc(form.title) }}\n                                    </sw-tabs-item>\n                                </template>\n\n                                <template #content="{ active }">\n                                    <template\n                                            v-for="form in forms"\n                                            :key="`tab-${form.ident}`"\n                                    >\n                                        <div\n                                                v-if="active === form.ident"\n                                                class="aggro-entity-detail__tab"\n                                        >\n                                            <sw-card\n                                                    v-for="card in form.cards"\n                                                    :key="`card-${card.ident}`"\n                                                    class="aggro-entity-detail__card"\n                                                    :class="card.grid ? \'--has-grid\' : \'\'"\n                                                    position-identifier="`aggro-entity-detail-tab-${card.ident}`"\n                                                    :title="card.title ? $tc(card.title) : \'\'"\n                                                    :content-padding="card.contentPadding !== false"\n                                            >\n                                                <template v-if="!isLoading">\n                                                    <div class="aggro-entity-detail__grid-toolbar" v-if="!editEntity.isNew() && card.grid">\n                                                        <sw-container\n                                                                columns="1fr 32px minmax(100px, 200px)"\n                                                                gap="0 10px"\n                                                        >\n                                                            <sw-simple-search-field\n                                                                    v-model:value="gridSearchTerm[card.grid.ref]"\n                                                                    size="small"\n                                                                    variant="form"\n                                                                    @search-term-change="onGridSearch(card.grid)"\n                                                            />\n                                                            <sw-button\n                                                                    square\n                                                                    size="small"\n                                                                    :disabled="!gridSelection[card.grid.ref] || gridSelection[card.grid.ref].length === 0"\n                                                                    class="aggro-entity-detail__grid-delete-button"\n                                                                    @click="onDeleteGridEntity(card.grid)"\n                                                            >\n                                                                <sw-icon\n                                                                        name="regular-trash"\n                                                                        small\n                                                                />\n                                                            </sw-button>\n\n                                                            <sw-container>\n                                                                <sw-button\n                                                                        size="small"\n                                                                        class="aggro-entity-detail__grid-add-button"\n                                                                        @click="onAddGridEntity(card.grid)"\n                                                                >\n                                                                    {{ $tc(\'aggro.entity-detail.addOption\') }}\n                                                                </sw-button>\n                                                            </sw-container>\n                                                        </sw-container>\n                                                    </div>\n                                                    <sw-container :columns="card.columns || \'1fr\'" gap="0px 30px" v-if="card.fields">\n                                                        <template v-for="field in card.fields" :key="field.ref">\n                                                            <aggro-form-field-renderer\n                                                                :field="field"\n                                                                :edit-entity="editEntity"\n                                                            />\n                                                        </template>\n                                                    </sw-container>\n                                                    <component :is="card.component" v-if="card.component" :edit-entity="editEntity" />\n                                                </template>\n                                                <template #grid v-if="card.grid">\n                                                    <sw-empty-state\n                                                            v-if="editEntity.isNew()"\n                                                            title=""\n                                                            :subline="$tc(\'aggro.entity-detail.optionEmptyStateSubline\')"\n                                                            :absolute="false"\n                                                    >\n                                                        <template #icon>\n                                                            <img\n                                                                    :src="assetFilter(\'/administration/static/img/empty-states/products-empty-state.svg\')"\n                                                                    alt=""\n                                                            >\n                                                        </template>\n                                                    </sw-empty-state>\n                                                    <sw-one-to-many-grid\n                                                            v-else\n                                                            :ref="(el) => gridRefs[card.grid.ref] = el"\n                                                            :is-loading="gridLoading[card.grid.ref]"\n                                                            :collection="editEntity[card.grid.ref]"\n                                                            :data-source="editEntity[card.grid.ref]"\n                                                            :columns="card.grid.columns"\n                                                            :full-page="false"\n                                                            :local-mode="editEntity.isNew()"\n                                                            :allow-inline-edit="acl.can(gridEntity(card.grid)+\'.editor\')"\n                                                            :sort-by="getGridSortBy(card.grid)"\n                                                            :sort-direction="getGridSortDirection(card.grid)"\n                                                            @selection-change="onGridSelectionChanged(card.grid, $event)"\n                                                    >\n\n                                                        <template #column-name="{ item, isInlineEdit }">\n                                                            <template v-if="isInlineEdit">\n                                                                <sw-text-field\n                                                                        v-model:value="item.name"\n                                                                        size="small"\n                                                                />\n                                                            </template>\n\n                                                            <a\n                                                                    v-else\n                                                                    class="aggro-entity-detail__grid-detail-link"\n                                                                    role="button"\n                                                                    tabindex="0"\n                                                                    @click="onEditGridEntity(card.grid,item)"\n                                                                    @keydown.enter="onEditGridEntity(card.grid,item)"\n                                                            >\n                                                                {{ item.translated.name }}\n                                                            </a>\n                                                        </template>\n\n                                                        <template\n                                                                v-for="(renderer, column) in gridColumnRenderers(card.grid)"\n                                                                #[`column-${column}`]="{ item }"\n                                                        >\n                                                            {{ renderer(item) }}\n                                                        </template>\n\n                                                        <template #more-actions="{ item }">\n                                                            <sw-context-menu-item\n                                                                    class="aggro-entity-detail__grid-edit-action"\n                                                                    :disabled="!acl.can(gridEntity(card.grid)+\'.editor\')"\n                                                                    @click="onEditGridEntity(card.grid,item)"\n                                                            >\n                                                                {{ $tc(\'aggro.entity-detail.contextMenuView\') }}\n                                                            </sw-context-menu-item>\n                                                        </template>\n\n                                                        <template #delete-action="{ item }">\n                                                            <sw-context-menu-item\n                                                                    variant="danger"\n                                                                    :disabled="!acl.can(gridEntity(card.grid)+\'.editor\')"\n                                                                    @click="onDeleteSingleGridEntity(card.grid,item.id)"\n                                                            >\n                                                                {{ $tc(\'aggro.entity-detail.contextMenuDelete\') }}\n                                                            </sw-context-menu-item>\n                                                        </template>\n                                                    </sw-one-to-many-grid>\n                                                    <sw-modal\n                                                        :title="gridEditEntity?.name ? gridEditEntity.name : $tc(\'aggro.entity-detail.editGridHeadline\')"\n                                                        @modal-close="onCancelEditGridEntity"\n                                                        v-if="editedGrid?.ref === card.grid.ref && gridEditEntity"\n                                                    >\n                                                        <sw-container columns="1fr" gap="0px 30px">\n                                                            <template v-for="gridField in card.grid.fields" :key="gridField.ref">\n                                                                <aggro-form-field-renderer\n                                                                        :field="gridField"\n                                                                        :edit-entity="editEntity"\n                                                                        :grid-edit-entity="gridEditEntity"\n                                                                />\n                                                            </template>\n                                                        </sw-container>\n                                                        <template #modal-footer>\n                                                                <sw-button\n                                                                        size="small"\n                                                                        @click="onCancelEditGridEntity"\n                                                                >\n                                                                    {{ $tc(\'global.default.cancel\') }}\n                                                                </sw-button>\n                                                                <sw-button\n                                                                        variant="primary"\n                                                                        size="small"\n                                                                        @click="onSaveGridEntity"\n                                                                >\n                                                                    {{ $tc(\'global.default.apply\') }}\n                                                                </sw-button>\n                                                        </template>\n                                                    </sw-modal>\n                                                </template>\n                                            </sw-card>\n                                        </div>\n                                    </template>\n                                </template>\n                            </sw-tabs>\n                        {% endblock %}\n\n                        {% block aggro_entity_detail_custom_field_sets %}\n                            <sw-card\n                                    v-if="customFieldSets.length > 0"\n                                    position-identifier="aggro-entity-detail-custom-field-sets"\n                                    :title="$tc(\'sw-settings-custom-field.general.mainMenuItemGeneral\')"\n                                    :is-loading="entityIsLoading"\n                            >\n                                <sw-custom-field-set-renderer\n                                        v-if="editEntity"\n                                        :entity="editEntity"\n                                        :sets="customFieldSets"\n                                        :disabled="!acl.can(entity+\'.editor\') || undefined"\n                                />\n                            </sw-card>\n                        {% endblock %}\n\n                        {% block aggro_entity_detail_modals %}\n                            <template v-for="modal in modals">\n                                <component\n                                        v-if="modalIsOpen(modal.ident)"\n                                        v-bind="modal.props"\n                                        :is="modal.component"\n                                        :edit-entity="editEntity"\n                                        @modal-close="closeModal(modal.ident)"\n                                />\n                            </template>\n                        {% endblock %}\n                    </template>\n                </sw-card-view>\n            </template>\n        {% endblock %}\n\n        {% block aggro_entity_detail_sidebar %}\n            <template #sidebar>\n                <sw-sidebar :propagate-width="true">\n                    <sw-sidebar-media-item\n                            ref="mediaSidebarItem"\n                            :disabled="!acl.can(entity+\'.editor\') || undefined"\n                    >\n                        <template\n                                #context-menu-items="media"\n                        >\n                            <sw-context-menu-item @click="setMediaFromSidebar(media.mediaItem)">\n                                {{ $tc(\'aggro.entity-detail.labelUseAsLogo\') }}\n                            </sw-context-menu-item>\n                        </template>\n                    </sw-sidebar-media-item>\n                </sw-sidebar>\n            </template>\n        {% endblock %}\n\n    </sw-page>\n{% endblock %}',inject:["repositoryFactory","acl"],mixins:[i.getByName("placeholder"),i.getByName("notification"),i.getByName("discard-detail-page-changes")("entity")],shortcuts:{"SYSTEMKEY+S":"onSave",ESCAPE:"onCancel"},props:{entityId:{type:String,required:!1,default:null},entity:String,actions:Object,modals:Object,labels:Object,links:Object,forms:Object,context:Object},data(){return{editEntity:null,customFieldSets:[],isLoading:!1,isSaveSuccessful:!1,openModals:{},gridSelection:{},gridSortDirection:{},gridSortBy:{},gridSearchTerm:{},gridLoading:{},gridEditEntity:null,editedGrid:null,gridRefs:{}}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{isSystemLanguage(){return a.get("context").api.systemLanguageId===this.currentLanguage},currentLanguage(){return a.get("context").api.languageId},identifier(){return this.placeholder(this.editEntity,"name")},entityIsLoading(){return this.isLoading||null==this.editEntity},entityRepository(){return this.repositoryFactory.create(this.entity)},entityCriteria(){let t=new r;for(let e of(t.addFilter(r.equals("id",this.entityId)),this.associationFormFields))t.addAssociation(e);return t},associationFormFields(){let t=Shopware.EntityDefinition.get(this.entity),e=[];for(let n of this.forms){for(let i of n.cards)if(i.grid){if(e.push(i.grid.ref),i.grid.associations)for(let t of i.grid.associations)e.push(i.grid.ref+"."+t)}else if(i.fields)for(let n of i.fields){let i=t.properties[n.ref];if(console.log("Definition:",t,"Field:",n,"Prop:",i),i&&"association"===i.type&&"many_to_many"===i.relation&&(e.push(n.ref),n.associations))for(let t of n.associations)e.push(n.ref+"."+t)}for(let t of n.associations||[])e.push(t)}return e},mediaRepository(){return this.repositoryFactory.create("media")},customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},customFieldSetCriteria(){let t=new r(1,null);return t.addFilter(r.equals("relations.entityName",this.entity)),t},mediaUploadTag(){return`aggro-entity-detail--${this.editEntity.id}`},tooltipSave(){if(this.acl.can(this.entity+".editor")){let t=this.$device.getSystemKey();return{message:`${t} + S`,appearance:"light"}}return{showDelay:300,message:this.$tc("sw-privileges.tooltip.warning"),disabled:this.acl.can(this.entity+".editor"),showOnDisabledElements:!0}},tooltipCancel(){return{message:"ESC",appearance:"light"}},assetFilter(){return Shopware.Filter.getByName("asset")}},watch:{entityId(){this.createdComponent()}},created(){this.createdComponent()},methods:{createdComponent(){if(this.entityId){this.loadEntityData();return}Shopware.State.commit("context/resetLanguageToDefault"),this.editEntity=this.entityRepository.create()},async loadEntityData(){this.isLoading=!0;let[t,e]=await Promise.allSettled([this.entityRepository.search(this.entityCriteria,{...this.context||Shopware.Context.api,inheritance:!0}),this.customFieldSetRepository.search(this.customFieldSetCriteria,this.context||Shopware.Context.api)]);"fulfilled"===t.status&&(this.editEntity=t.value.first()),"fulfilled"===e.status&&(this.customFieldSets=e.value),("rejected"===t.status||"rejected"===e.status)&&this.createNotificationError({message:this.$tc("global.notification.notificationLoadingDataErrorMessage")}),this.isLoading=!1},abortOnLanguageChange(){return this.entityRepository.hasChanges(this.editEntity)},saveOnLanguageChange(){return this.onSave()},onChangeLanguage(){this.loadEntityData()},setMediaItem({targetId:t}){this.editEntity.mediaId=t},setMediaFromSidebar(t){this.editEntity.mediaId=t.id},onUnlinkLogo(){this.editEntity.mediaId=null},openMediaSidebar(){this.$refs.mediaSidebarItem.openContent()},onDropMedia(t){this.setMediaItem({targetId:t.id})},onSave(){this.acl.can(this.entity+".editor")&&(this.isLoading=!0,this.entityRepository.save(this.editEntity,this.context||Shopware.Context.api).then(()=>{if(this.isLoading=!1,this.isSaveSuccessful=!0,null===this.entityId){this.$router.push({name:this.links.detail,params:{id:this.editEntity.id}});return}this.loadEntityData()}).catch(t=>{throw this.isLoading=!1,this.createNotificationError({message:this.$tc("global.notification.notificationSaveErrorMessageRequiredFieldsInvalid")}),t}))},onCancel(){this.$router.push({name:this.links.list})},translatedConfig(t){return t?Object.assign({},t,{label:t.label?this.$tc(t.label):null,placeholder:t.placeholder?this.$tc(t.placeholder):null,helpText:t.helpText?this.$tc(t.helpText):null,options:t.options?t.options.map(t=>({...t,label:this.$tc(t.label)})):null}):null},gridPropertyDefinition(t){return Shopware.EntityDefinition.get(this.entity).properties[t.ref]},gridEntity(t){let e=this.gridPropertyDefinition(t);return e?.entity},gridRepository(t){return this.repositoryFactory.create(this.gridEntity(t))},gridColumnRenderers(t){let e={};for(let n of t.columns)n.renderer&&(e[n.property]=n.renderer);return e},getGridSortBy(t){return this.gridSortBy[t.ref]||"name"},getGridSortDirection(t){return this.gridSortDirection[t.ref]||"ASC"},onGridSearch(t){this.editEntity[t.ref].criteria.setTerm(this.gridSearchTerm[t.ref]),this.refreshGrid(t)},onGridSelectionChanged(t,e){this.gridSelection[t.ref]=e&&Object.values(e).length?e:null},onAddGridEntity(t){if(!this.isSystemLanguage)return!1;this.gridEditEntity=this.gridRepository(t).create();let e=this.gridPropertyDefinition(t);return this.gridEditEntity[e.referenceField]=this.editEntity.id,this.editedGrid=t,!0},async onDeleteGridEntity(t){let e=Object.values(this.gridSelection[t.ref]);if(this.editEntity.isNew())for(let n of e)this.editEntity[t.ref].remove(n.id);else for(let n of e)await this.gridRepository(t).delete(n.id);this.refreshGrid(t)},async onDeleteSingleGridEntity(t,e){await this.gridRepository(t).delete(e),this.refreshGrid(t)},onEditGridEntity(t,e){this.gridEditEntity=e,this.editedGrid=t},onCancelEditGridEntity(){this.gridEditEntity=this.editedGrid=null},onSaveGridEntity(){let t=this.editedGrid.ref;this.editEntity.isNew()?(console.log("local new",this.gridEditEntity),this.editEntity[t].has(this.gridEditEntity.id)||this.editEntity[t].add(this.gridEditEntity),this.gridEditEntity=this.editedGrid=null):this.gridRepository(this.editedGrid).save(this.gridEditEntity).then(()=>{this.refreshGrid(this.editedGrid),this.gridEditEntity=this.editedGrid=null})},refreshGrid(t){this.gridLoading[t.ref]=!0,this.gridRefs[t.ref].resetSelection(),this.gridRefs[t.ref].load().then(()=>{this.gridLoading[t.ref]=!1})},modalIsOpen(t){return!0===this.openModals[t]},openModal(t){this.$set(this.openModals,t,!0),console.log("openModal",t,this.openModals)},closeModal(t){this.$set(this.openModals,t,!1),console.log("closeModal",t,this.openModals)}}}},729:function(t,e,n){var i=n(934);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[t.id,i,""]]),i.locals&&(t.exports=i.locals),(0,n(534).A)("5b31790f",i,!0,{})},534:function(t,e,n){"use strict";function i(t,e){for(var n=[],i={},a=0;a<e.length;a++){var r=e[a],o=r[0],s={id:t+":"+a,css:r[1],media:r[2],sourceMap:r[3]};i[o]?i[o].parts.push(s):n.push(i[o]={id:o,parts:[s]})}return n}n.d(e,{A:function(){return h}});var a,r="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!r)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var o={},s=r&&(document.head||document.getElementsByTagName("head")[0]),d=null,l=0,c=!1,g=function(){},m=null,u="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function h(t,e,n,a){c=n,m=a||{};var r=i(t,e);return f(r),function(e){for(var n=[],a=0;a<r.length;a++){var s=o[r[a].id];s.refs--,n.push(s)}e?f(r=i(t,e)):r=[];for(var a=0;a<n.length;a++){var s=n[a];if(0===s.refs){for(var d=0;d<s.parts.length;d++)s.parts[d]();delete o[s.id]}}}}function f(t){for(var e=0;e<t.length;e++){var n=t[e],i=o[n.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](n.parts[a]);for(;a<n.parts.length;a++)i.parts.push(b(n.parts[a]));i.parts.length>n.parts.length&&(i.parts.length=n.parts.length)}else{for(var r=[],a=0;a<n.parts.length;a++)r.push(b(n.parts[a]));o[n.id]={id:n.id,refs:1,parts:r}}}}function y(){var t=document.createElement("style");return t.type="text/css",s.appendChild(t),t}function b(t){var e,n,i=document.querySelector("style["+u+'~="'+t.id+'"]');if(i){if(c)return g;i.parentNode.removeChild(i)}if(p){var a=l++;e=w.bind(null,i=d||(d=y()),a,!1),n=w.bind(null,i,a,!0)}else e=E.bind(null,i=y()),n=function(){i.parentNode.removeChild(i)};return e(t),function(i){i?(i.css!==t.css||i.media!==t.media||i.sourceMap!==t.sourceMap)&&e(t=i):n()}}var v=(a=[],function(t,e){return a[t]=e,a.filter(Boolean).join("\n")});function w(t,e,n,i){var a=n?"":i.css;if(t.styleSheet)t.styleSheet.cssText=v(e,a);else{var r=document.createTextNode(a),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(r,o[e]):t.appendChild(r)}}function E(t,e){var n=e.css,i=e.media,a=e.sourceMap;if(i&&t.setAttribute("media",i),m.ssrId&&t.setAttribute(u,e.id),a&&(n+="\n/*# sourceURL="+a.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}}]);