"use strict";(window["webpackJsonpPluginaggro-plugin-core-plugin"]=window["webpackJsonpPluginaggro-plugin-core-plugin"]||[]).push([[826],{826:function(t,e,n){n.r(e),n.d(e,{default:function(){return s}});let{Mixin:i,Data:{Criteria:a}}=Shopware,{mapPropertyErrors:o}=Shopware.Component.getComponentHelper();var s={template:'{% block aggro_entity_detail %}\n    <sw-page class="aggro-entity-detail">\n\n        {% block aggro_entity_detail_header %}\n            <template #smart-bar-header>\n                <h2>{{ placeholder(editEntity, \'name\', $tc(\'aggro.entity-detail.textHeadline\')) }}</h2>\n            </template>\n\n        {% endblock %}\n\n        {% block aggro_entity_detail_actions %}\n            <template #smart-bar-actions>\n\n                {% block aggro_entity_detail_actions_abort %}\n                    <sw-button\n                            v-tooltip.bottom="tooltipCancel"\n                            :disabled="entityIsLoading || undefined"\n                            @click="onCancel"\n                    >\n                        {{ $tc(\'global.default.cancel\') }}\n                    </sw-button>\n                {% endblock %}\n\n                {% block aggro_entity_detail_actions_save %}\n                    <sw-button-process\n                            v-model:process-success="isSaveSuccessful"\n                            v-tooltip.bottom="tooltipSave"\n                            class="aggro-entity-detail__save-action"\n                            :is-loading="isLoading"\n                            :disabled="isLoading || !acl.can(entity+\'.editor\') || undefined"\n                            variant="primary"\n                            @click.prevent="onSave"\n                    >\n                        {{ $tc(\'aggro.entity-detail.buttonSave\') }}\n                    </sw-button-process>\n                {% endblock %}\n\n            </template>\n        {% endblock %}\n\n        {% block aggro_entity_detail_language_switch %}\n            <template #language-switch>\n                <sw-language-switch\n                        :disabled="entityId == null || undefined"\n                        :save-changes-function="saveOnLanguageChange"\n                        :abort-change-function="abortOnLanguageChange"\n                        @on-change="onChangeLanguage"\n                />\n            </template>\n        {% endblock %}\n\n        {% block aggro_entity_detail_content %}\n            <template #content>\n                <sw-card-view>\n                    <template v-if="entityIsLoading">\n                        <sw-skeleton variant="detail-bold" />\n                        <sw-skeleton />\n                    </template>\n\n                    <template v-else>\n\n                        {% block aggro_entity_detail_content_language_info %}\n                            <sw-language-info\n                                    :entity-description="placeholder(entity, \'name\', $tc(\'aggro.entity-detail.textHeadline\'))"\n                            />\n                        {% endblock %}\n\n                        {% block aggro_entity_detail_content_tabs %}\n                            <sw-tabs\n                                    v-if="!isCreateMode"\n                                    class="aggro-entity-detail__tabs"\n                                    position-identifier="aggro-entity-detail-tabs"\n                                    :default-item="forms[0].ident"\n                            >\n\n                                <template #default="{ active }">\n                                    <sw-tabs-item\n                                            v-for="form in forms"\n                                            :key="`tab-item-${form.ident}`"\n                                            class="aggro-entity-detail__tab-item"\n                                            :name="form.ident"\n                                            :active-tab="active"\n                                    >\n                                        {{ $tc(form.title) }}\n                                    </sw-tabs-item>\n                                </template>\n\n                                <template #content="{ active }">\n                                    <template\n                                            v-for="form in forms"\n                                            :key="`tab-${form.ident}`"\n                                    >\n                                        <div\n                                                v-if="active === form.ident"\n                                                class="aggro-entity-detail__tab"\n                                        >\n                                            <sw-card\n                                                    v-for="card in form.cards"\n                                                    :key="`card-${card.ident}`"\n                                                    class="aggro-entity-detail__card"\n                                                    position-identifier="`aggro-entity-detail-tab-${card.ident}`"\n                                                    :title="$tc(card.title)"\n                                            >\n                                                <template v-if="!isLoading">\n                                                    <sw-container :columns="card.columns || \'1fr\'" gap="0px 30px">\n                                                        <template v-for="field in card.fields" :key="field.ref">\n                                                            <sw-form-field-renderer\n                                                                :type="field.type"\n                                                                :config="translatedConfig(field.config)"\n                                                                v-if="field.condition ? field.condition(editEntity) : true"\n                                                                v-model:value="editEntity[field.ref]"\n                                                                v-model:entity-collection="editEntity[field.ref]"\n                                                                class="aggro-entity-detail__field"\n                                                            />\n                                                        </template>\n                                                    </sw-container>\n                                                </template>\n                                            </sw-card>\n                                        </div>\n                                    </template>\n                                </template>\n                            </sw-tabs>\n                        {% endblock %}\n\n                        {% block aggro_entity_detail_custom_field_sets %}\n                            <sw-card\n                                    v-if="customFieldSets.length > 0"\n                                    position-identifier="aggro-entity-detail-custom-field-sets"\n                                    :title="$tc(\'sw-settings-custom-field.general.mainMenuItemGeneral\')"\n                                    :is-loading="entityIsLoading"\n                            >\n                                <sw-custom-field-set-renderer\n                                        v-if="editEntity"\n                                        :entity="editEntity"\n                                        :sets="customFieldSets"\n                                        :disabled="!acl.can(entity+\'.editor\') || undefined"\n                                />\n                            </sw-card>\n                        {% endblock %}\n                    </template>\n                </sw-card-view>\n            </template>\n        {% endblock %}\n\n        {% block aggro_entity_detail_sidebar %}\n            <template #sidebar>\n                <sw-sidebar :propagate-width="true">\n                    <sw-sidebar-media-item\n                            ref="mediaSidebarItem"\n                            :disabled="!acl.can(entity+\'.editor\') || undefined"\n                    >\n                        <template\n                                #context-menu-items="media"\n                        >\n                            <sw-context-menu-item @click="setMediaFromSidebar(media.mediaItem)">\n                                {{ $tc(\'aggro.entity-detail.labelUseAsLogo\') }}\n                            </sw-context-menu-item>\n                        </template>\n                    </sw-sidebar-media-item>\n                </sw-sidebar>\n            </template>\n        {% endblock %}\n\n    </sw-page>\n{% endblock %}',inject:["repositoryFactory","acl"],mixins:[i.getByName("placeholder"),i.getByName("notification"),i.getByName("discard-detail-page-changes")("entity")],shortcuts:{"SYSTEMKEY+S":"onSave",ESCAPE:"onCancel"},props:{entityId:{type:String,required:!1,default:null},entity:String,labels:Object,links:Object,forms:Object},data(){return{editEntity:null,customFieldSets:[],isLoading:!1,isSaveSuccessful:!1}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{identifier(){return this.placeholder(this.editEntity,"name")},entityIsLoading(){return this.isLoading||null==this.editEntity},entityRepository(){return this.repositoryFactory.create(this.entity)},entityCriteria(){let t=new a;for(let e of(t.addFilter(a.equals("id",this.entityId)),this.associationFormFields))t.addAssociation(e);return t},associationFormFields(){let t=Shopware.EntityDefinition.get(this.entity),e=[];for(let n of this.forms)for(let i of n.cards)for(let n of i.fields){let i=t.properties[n.ref];i&&"association"===i.type&&"many_to_many"===i.relation&&e.push(n.ref)}return e},mediaRepository(){return this.repositoryFactory.create("media")},customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},customFieldSetCriteria(){let t=new a(1,null);return t.addFilter(a.equals("relations.entityName",this.entity)),t},mediaUploadTag(){return`aggro-entity-detail--${this.editEntity.id}`},tooltipSave(){if(this.acl.can(this.entity+".editor")){let t=this.$device.getSystemKey();return{message:`${t} + S`,appearance:"light"}}return{showDelay:300,message:this.$tc("sw-privileges.tooltip.warning"),disabled:this.acl.can(this.entity+".editor"),showOnDisabledElements:!0}},tooltipCancel(){return{message:"ESC",appearance:"light"}}},watch:{entityId(){this.createdComponent()}},created(){this.createdComponent()},methods:{createdComponent(){if(this.entityId){this.loadEntityData();return}Shopware.State.commit("context/resetLanguageToDefault"),this.editEntity=this.entityRepository.create()},async loadEntityData(){this.isLoading=!0;let[t,e]=await Promise.allSettled([this.entityRepository.search(this.entityCriteria),this.customFieldSetRepository.search(this.customFieldSetCriteria)]);"fulfilled"===t.status&&(this.editEntity=t.value.first()),"fulfilled"===e.status&&(this.customFieldSets=e.value),("rejected"===t.status||"rejected"===e.status)&&this.createNotificationError({message:this.$tc("global.notification.notificationLoadingDataErrorMessage")}),this.isLoading=!1},abortOnLanguageChange(){return this.entityRepository.hasChanges(this.editEntity)},saveOnLanguageChange(){return this.onSave()},onChangeLanguage(){this.loadEntityData()},setMediaItem({targetId:t}){this.editEntity.mediaId=t},setMediaFromSidebar(t){this.editEntity.mediaId=t.id},onUnlinkLogo(){this.editEntity.mediaId=null},openMediaSidebar(){this.$refs.mediaSidebarItem.openContent()},onDropMedia(t){this.setMediaItem({targetId:t.id})},onSave(){this.acl.can(this.entity+".editor")&&(this.isLoading=!0,this.entityRepository.save(this.editEntity).then(()=>{if(this.isLoading=!1,this.isSaveSuccessful=!0,null===this.entityId){this.$router.push({name:this.links.detail,params:{id:this.editEntity.id}});return}this.loadEntityData()}).catch(t=>{throw this.isLoading=!1,this.createNotificationError({message:this.$tc("global.notification.notificationSaveErrorMessageRequiredFieldsInvalid")}),t}))},onCancel(){this.$router.push({name:this.links.list})},translatedConfig(t){return Object.assign({},t,{label:t.label?this.$tc(t.label):null,placeholder:t.placeholder?this.$tc(t.placeholder):null,helpText:t.helpText?this.$tc(t.helpText):null,options:t.options?t.options.map(t=>({...t,label:this.$tc(t.label)})):null})}}}}}]);