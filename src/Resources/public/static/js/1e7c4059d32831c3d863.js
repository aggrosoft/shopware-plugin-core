(window["webpackJsonpPluginaggro-plugin-core-plugin"]=window["webpackJsonpPluginaggro-plugin-core-plugin"]||[]).push([[35],{372:function(){},35:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return l}}),t(105);var l={template:'\n\n{% block sw_data_grid_settings_additional_settings_inner %}\n    {% parent %}\n    <sw-multi-select\n        v-if="groupableColumns.length > 0"\n        :label="$t(\'sw-data-grid.settings.groupBy\')"\n        :options="groupableColumns"\n        label-property="label"\n        value-property="property"\n        v-model:value="currentGroupBy"\n    />\n{% endblock %}\n\n\n{% block sw_data_grid_header_columns_label %}\n    <template v-else>\n        <span v-if="isSumColumn(column)" class="sw-data-grid__column-actions-sum">\n            &sum;\n        </span>\n        {{ $te((column.label ?? \'undefined\')) ? $tc(column.label) : column.label }}\n    </template>\n{% endblock %}\n\n{% block sw_data_grid_column_actions %}\n    {% parent %}\n\n    <sw-icon\n            v-if="isGroupedColumn(column)"\n            name="regular-shuffle"\n            size="14px"\n    >\n    </sw-icon>\n{% endblock %}\n\n{% block sw_data_grid_body_row %}\n    <template\n        v-for="(item, itemIndex) in records"\n        :key="item.id">\n    <tr\n\n            class="sw-data-grid__row"\n            :class="getRowClasses(item, itemIndex)"\n    >\n\n        {% block sw_data_grid_body_cell_selection %}\n            <td\n                    v-if="showSelection"\n                    class="sw-data-grid__cell sw-data-grid__cell--selection"\n            >\n                <slot\n                        name="selection-content"\n                        v-bind="{ item, isSelected, isRecordSelectable, selectItem, itemIdentifierProperty }"\n                >\n                    {% block sw_data_grid_body_cell_selection_content %}\n                        <div class="sw-data-grid__cell-content">\n                            {% block sw_data_grid_select_item_checkbox %}\n                                <sw-checkbox-field\n                                        :aria-label="$tc(\'global.sw-data-grid.labelSelected\')"\n                                        :disabled="!isRecordSelectable(item)"\n                                        :value="isSelected(item[itemIdentifierProperty])"\n                                        @update:value="selectItem($event, item)"\n                                />\n                            {% endblock %}\n                        </div>\n                    {% endblock %}\n                </slot>\n            </td>\n        {% endblock %}\n\n        {% block sw_data_grid_body_columns %}\n            <td\n                    v-for="(column, columnIndex) in currentVisibleColumns"\n                    :key="`${item.id}-${columnIndex}`"\n                    class="sw-data-grid__cell"\n                    :class="getCellClasses(column)"\n                    role="gridcell"\n                    @dblclick="onDbClickCell(item)"\n            >\n                <sw-provide :aria-label="column.label">\n\n                    {% block sw_data_grid_body_columns_content %}\n                        <div class="sw-data-grid__cell-content">\n\n                            {% block sw_data_grid_preview_slot %}\n                                <slot\n                                        v-if="previews && !isInlineEdit(item)"\n                                        :name="`preview-${column.property}`"\n                                        v-bind="{ item, column, compact }"\n                                ></slot>\n                            {% endblock %}\n\n                            {% block sw_data_grid_columns_slot %}\n                                <slot\n                                        :name="`column-${column.property}`"\n                                        v-bind="{ item, itemIndex, column, columnIndex, compact, isInlineEdit: (isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')), selectItem }"\n                                >\n                                    <template v-if="column.inlineEdit === \'boolean\'">\n                                        {% block sw_data_grid_columns_boolean %}\n                                            <sw-data-grid-column-boolean\n                                                    v-model:value="item[column.property]"\n                                                    :is-inline-edit="isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')"\n                                            />\n                                        {% endblock %}\n                                    </template>\n                                    <template v-else>\n                                        {% block sw_data_grid_columns_inline_edit %}\n                                            <template v-if="isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')">\n                                                {% block sw_data_grid_columns_render_inline_edit %}\n                                                    <sw-data-grid-inline-edit\n                                                            v-model:value="item[column.property]"\n                                                            :column="column"\n                                                            :compact="compact"\n                                                    />\n                                                {% endblock %}\n                                            </template>\n                                        {% endblock %}\n\n                                        {% block sw_data_grid_columns_value %}\n                                            <template v-else>\n                                                {% block sw_data_grid_columns_render_router_link %}\n                                                    <router-link\n                                                            v-if="column.routerLink"\n                                                            class="sw-data-grid__cell-value"\n                                                            :to="{ name: column.routerLink, params: { id: item.id } }"\n                                                    >\n                                                        <component\n                                                                v-if="column.component"\n                                                                :is="column.component"\n                                                                :item="item"\n                                                                :column="column"\n                                                                :value="renderColumn(item, column)"\n                                                        />\n                                                        <span v-else>\n                                                            {{ renderColumn(item, column) }}\n                                                        </span>\n                                                    </router-link>\n                                                {% endblock %}\n                                                {% block sw_data_grid_columns_render_value %}\n                                                    <span\n                                                            v-else\n                                                            class="sw-data-grid__cell-value"\n                                                    >\n                                                        <sw-button\n                                                                v-if="isGroupedColumn(column)"\n                                                                size="x-small"\n                                                                variant="context"\n                                                                @click="toggleItemExpand(item, column)"\n                                                        >\n                                                            <sw-icon :name="isItemColumnExpanded(item, column) ? \'regular-minus-square\' : \'regular-plus-square\'" small></sw-icon>\n                                                        </sw-button>\n\n                                                        <component\n                                                                v-if="column.component"\n                                                                :is="column.component"\n                                                                :item="item"\n                                                                :column="column"\n                                                                :value="renderColumn(item, column)"\n                                                        />\n                                                        <span v-else>\n                                                            {{ renderColumn(item, column) }}\n                                                        </span>\n                                                    </span>\n                                                {% endblock %}\n                                            </template>\n                                        {% endblock %}\n                                    </template>\n                                </slot>\n                            {% endblock %}\n                        </div>\n                    {% endblock %}\n                </sw-provide>\n            </td>\n        {% endblock %}\n\n        {% block sw_data_grid_body_cell_spacer %}\n            <td\n                    v-if="hasResizeColumns"\n                    aria-hidden="true"\n                    class="sw-data-grid__cell sw-data-grid__cell-spacer"\n                    @dblclick="onDbClickCell(item)"\n            >\n                <div class="sw-data-grid__cell-content"></div>\n            </td>\n        {% endblock %}\n\n        {% block sw_data_grid_body_cell_actions %}\n            <td\n                    v-if="showActions"\n                    class="sw-data-grid__cell sw-data-grid__cell--actions"\n            >\n                {% block sw_data_grid_body_cell_actions_content %}\n                    <div class="sw-data-grid__cell-content">\n\n                        {% block sw_data_grid_inline_edit_actions %}\n                            <template v-if="isInlineEditActive && currentInlineEditId === item[itemIdentifierProperty]">\n\n                                {% block sw_data_grid_inline_edit_actions_cancel %}\n                                    <sw-button\n                                            class="sw-data-grid__inline-edit-cancel"\n                                            size="x-small"\n                                            :title="$tc(\'global.default.cancel\')"\n                                            :aria-label="$tc(\'global.default.cancel\')"\n                                            square\n                                            @click="onClickCancelInlineEdit(item)"\n                                    >\n                                        {% block sw_data_grid_inline_edit_actions_cancel_icon %}\n                                            <sw-icon name="regular-times-xs" />\n                                        {% endblock %}\n                                    </sw-button>\n                                {% endblock %}\n\n                                {% block sw_data_grid_inline_edit_actions_save %}\n                                    <sw-button\n                                            class="sw-data-grid__inline-edit-save"\n                                            variant="primary"\n                                            size="x-small"\n                                            :title="$tc(\'global.default.save\')"\n                                            :aria-label="$tc(\'global.default.save\')"\n                                            square\n                                            @click="onClickSaveInlineEdit(item)"\n                                    >\n                                        {% block sw_data_grid_inline_edit_actions_save_icon %}\n                                            <sw-icon\n                                                    name="regular-checkmark-xxs"\n                                            />\n                                        {% endblock %}\n                                    </sw-button>\n                                {% endblock %}\n                            </template>\n                        {% endblock %}\n\n                        {% block sw_data_grid_body_cell_actions_menu %}\n                            <sw-context-button\n                                    v-else\n                                    :menu-width="contextButtonMenuWidth"\n                                    class="sw-data-grid__actions-menu"\n                                    aria-label="global.sw-data-grid.actionsMenu"\n                            >\n                                <slot\n                                        name="actions"\n                                        :item="item"\n                                        :item-index="itemIndex"\n                                >\n                                    {% block sw_data_grid_slot_actions %}{% endblock %}\n                                </slot>\n                            </sw-context-button>\n                        {% endblock %}\n\n                        {% block sw_data_grid_body_cell_action_modals %}\n                            <slot\n                                    name="action-modals"\n                                    :item="item"\n                            >\n                                {% block sw_data_grid_slot_action_modals %}{% endblock %}\n                            </slot>\n                        {% endblock %}\n                    </div>\n                {% endblock %}\n            </td>\n        {% endblock %}\n    </tr>\n    <tr class="sw-data-grid__child-row" v-if="childItems[item.id] && isItemExpanded(item)">\n        <td :colspan="currentVisibleColumns.length + 3">\n            <sw-entity-listing\n                :columns="columns"\n                :items="childItems[item.id]"\n                :repository="repository"\n                :full-page="false"\n                />\n        </td>\n    </tr>\n    </template>\n{% endblock %}',props:{groupBy:{type:Array,required:!1},childItems:{type:Object,required:!1,default:()=>({})}},data:function(){return{expandedItems:{}}},computed:{groupableColumns(){return this.columns.filter(n=>n.groupable).map(n=>Object.assign({},n,{label:this.$tc(n.label)}))},currentGroupBy:{get(){return this.groupBy?this.groupBy:[]},set(n){this.$emit("update:groupBy",n)}},isGrouped(){return this.groupBy?.length>0}},methods:{applyResult(n){this.$super("applyResult",n),this.expandedItems={}},renderColumn:function(n,e){if(this.groupBy?.length){if(!e.grouping&&!e.groupable)return"";for(let t of this.groupBy){let l=`${t}-${e.property}`,i=this.items.aggregations[l],o=i?.buckets?.find(e=>e.key==n[t]);if(o)return o[e.grouping.name][e.grouping.type]}}return this.$super("renderColumn",n,e)},isGroupedColumn(n){return this.groupBy?.some(e=>e===n.property)},isSumColumn(n){return this.isGrouped&&n.grouping&&"sum"===n.grouping.type},isItemColumnExpanded(n,e){return this.expandedItems[n.id]===e.property},isItemExpanded(n){return this.expandedItems[n.id]},toggleItemExpand(n,e){this.expandedItems[n.id]?(this.$set(this.expandedItems,n.id,!1),this.$emit("item-collapse",n,e)):(this.$set(this.expandedItems,n.id,e.property),this.$emit("item-expand",n,e))},getHeaderCellClasses(n,e){let t=this.$super("getHeaderCellClasses",n,e);return this.isGroupedColumn(n)?t.push("sw-data-grid__cell--grouped"):!this.isGrouped||n.grouping||n.groupable||t.push("sw-data-grid__cell--disabled"),t}}}},105:function(n,e,t){var l=t(372);l.__esModule&&(l=l.default),"string"==typeof l&&(l=[[n.id,l,""]]),l.locals&&(n.exports=l.locals),(0,t(534).A)("04bd409f",l,!0,{})},534:function(n,e,t){"use strict";function l(n,e){for(var t=[],l={},i=0;i<e.length;i++){var o=e[i],s=o[0],a={id:n+":"+i,css:o[1],media:o[2],sourceMap:o[3]};l[s]?l[s].parts.push(a):t.push(l[s]={id:s,parts:[a]})}return t}t.d(e,{A:function(){return g}});var i,o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},a=o&&(document.head||document.getElementsByTagName("head")[0]),r=null,d=0,c=!1,u=function(){},m=null,p="data-vue-ssr-id",_="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function g(n,e,t,i){c=t,m=i||{};var o=l(n,e);return b(o),function(e){for(var t=[],i=0;i<o.length;i++){var a=s[o[i].id];a.refs--,t.push(a)}e?b(o=l(n,e)):o=[];for(var i=0;i<t.length;i++){var a=t[i];if(0===a.refs){for(var r=0;r<a.parts.length;r++)a.parts[r]();delete s[a.id]}}}}function b(n){for(var e=0;e<n.length;e++){var t=n[e],l=s[t.id];if(l){l.refs++;for(var i=0;i<l.parts.length;i++)l.parts[i](t.parts[i]);for(;i<t.parts.length;i++)l.parts.push(w(t.parts[i]));l.parts.length>t.parts.length&&(l.parts.length=t.parts.length)}else{for(var o=[],i=0;i<t.parts.length;i++)o.push(w(t.parts[i]));s[t.id]={id:t.id,refs:1,parts:o}}}}function v(){var n=document.createElement("style");return n.type="text/css",a.appendChild(n),n}function w(n){var e,t,l=document.querySelector("style["+p+'~="'+n.id+'"]');if(l){if(c)return u;l.parentNode.removeChild(l)}if(_){var i=d++;e=h.bind(null,l=r||(r=v()),i,!1),t=h.bind(null,l,i,!0)}else e=k.bind(null,l=v()),t=function(){l.parentNode.removeChild(l)};return e(n),function(l){l?(l.css!==n.css||l.media!==n.media||l.sourceMap!==n.sourceMap)&&e(n=l):t()}}var f=(i=[],function(n,e){return i[n]=e,i.filter(Boolean).join("\n")});function h(n,e,t,l){var i=t?"":l.css;if(n.styleSheet)n.styleSheet.cssText=f(e,i);else{var o=document.createTextNode(i),s=n.childNodes;s[e]&&n.removeChild(s[e]),s.length?n.insertBefore(o,s[e]):n.appendChild(o)}}function k(n,e){var t=e.css,l=e.media,i=e.sourceMap;if(l&&n.setAttribute("media",l),m.ssrId&&n.setAttribute(p,e.id),i&&(t+="\n/*# sourceURL="+i.sources[0]+" */",t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}}]);